<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tad.pgb.dao.pgbDao">


	<select id="pgbDtoListSelect" parameterType="pgbDtoVo" resultType="pgbDtoVo">
		SELECT *
		  FROM tb_domain td
		 WHERE student_seq = #{studentSeq }
		   AND del_yn = 'N'
		 ORDER BY domain_seq DESC
	</select>

	<select id="pgbLtoListSelect" parameterType="pgbLtoVo" resultType="pgbLtoVo">
		SELECT *
		  FROM tb_lto tl 
		 WHERE domain_seq = #{domainSeq }
		   AND del_yn = 'N'
		 ORDER BY lto_seq DESC
	</select>

	<select id="pgbStoListSelect" parameterType="pgbStoVo" resultType="pgbStoVo">
		SELECT *
		  FROM tb_sto ts 
		 WHERE lto_seq = #{ltoSeq }
		   AND del_yn = 'N'
		 ORDER BY sto_seq DESC
	</select>

	<select id="pgbLtoOneSelect" parameterType="pgbLtoVo" resultType="pgbLtoVo">
		SELECT *
		  FROM tb_lto tl 
		 WHERE lto_seq = #{ltoSeq }
	</select>

	<select id="pgbStoOneSelect" parameterType="pgbStoVo" resultType="pgbStoVo">
		SELECT *
		  FROM tb_sto ts 
		 WHERE sto_seq = #{stoSeq }
	</select>
	
	<select id="pgbLtoInsert" parameterType="pgbLtoVo">
		INSERT INTO tb_lto (
				domain_seq ,
				lto_status ,
				lto_name ,
				lto_contents 
			)
		VALUES (
				#{domainSeq } , 
				'WIT' ,
				#{ltoName } , 
				#{ltoContents }
			)
	</select>
	
	<select id="pgbLtoUpdate" parameterType="pgbLtoVo">
		UPDATE tb_lto SET 
			lto_name = #{ltoName } ,
			lto_contents = #{ltoContents } 
		WHERE lto_seq = #{ltoSeq }
	</select>
	
	<select id="pgbLtoStautsUpdate" parameterType="pgbLtoVo">
		UPDATE tb_lto SET 
			lto_status = #{ltoStatus } ,
			<choose>
				<when test="ltoStatus == 'CMP'">
				lto_arr_dt = current_timestamp()
				</when>
				<otherwise>
				lto_arr_dt = NULL
				</otherwise>
			</choose>			
		WHERE lto_seq = #{ltoSeq }
	</select>
	
	<select id="pgbStoStautsUpdate" parameterType="pgbStoVo">
		UPDATE tb_sto SET 
			sto_status = #{stoStatus } ,
			<choose>
				<when test="stoStatus == 'CMP'">
				sto_arr_dt = current_timestamp(),
				sto_arr_yn = 'Y'
				</when>
				<otherwise>
				sto_arr_dt = NULL,
				sto_arr_yn = 'N'
				</otherwise>
			</choose>			
		WHERE sto_seq = #{stoSeq }
	</select>
	
	<update id="pgbDtoStautsAutoUpdate" parameterType="pgbVo">
		UPDATE tb_domain SET
			domain_status = CASE 
				WHEN 
					(SELECT count(1) FROM tb_lto WHERE domain_seq = #{domainSeq })
					= 
					(SELECT count(1) FROM tb_lto WHERE domain_seq = #{domainSeq } AND lto_status = 'CMP')
				THEN 
					'CMP'
				ELSE 
					CASE 
					WHEN (SELECT COUNT(1) FROM tb_lto WHERE domain_seq = #{domainSeq } AND lto_status = 'ING') > 0 THEN 'ING'
					WHEN ((SELECT AA.domain_status FROM (SELECT domain_status FROM tb_domain WHERE domain_seq = #{domainSeq }) AA) = 'WIT') THEN 'WIT'
					ELSE 'ING' 
					END
				END 
		WHERE domain_seq = #{domainSeq }
		
		<selectKey keyProperty="domainStatus" resultType="String" order="AFTER">
			SELECT domain_status FROM tb_domain WHERE domain_seq = #{domainSeq }
		</selectKey>
	</update>
	
	<update id="pgbLtoStautsAutoUpdate" parameterType="pgbVo">
		UPDATE tb_lto SET
			lto_status = CASE 
				WHEN 
					(SELECT count(1) FROM tb_sto WHERE lto_seq = #{ltoSeq })
					= 
					(SELECT count(1) FROM tb_sto WHERE lto_seq = #{ltoSeq } AND sto_status = 'CMP')
				THEN 
					'CMP'
				ELSE 
					CASE 
					WHEN (SELECT COUNT(1) FROM tb_sto WHERE lto_seq = #{ltoSeq } AND sto_status = 'ING') > 0 THEN 'ING'
					WHEN (SELECT AA.lto_status FROM (SELECT lto_status FROM tb_lto WHERE lto_seq = #{ltoSeq }) AA) = 'WIT' THEN 'WIT'
					ELSE 'ING' 
					END
				END , 
			lto_arr_dt = CASE 
				WHEN 
					(SELECT count(1) FROM tb_sto WHERE lto_seq = #{ltoSeq })
					= 
					(SELECT count(1) FROM tb_sto WHERE lto_seq = #{ltoSeq } AND sto_status = 'CMP')
				THEN 
					current_timestamp()
				ELSE 
					NULL
				END 
		WHERE lto_seq = #{ltoSeq }
		
		<selectKey keyProperty="ltoStatus" resultType="String" order="AFTER">
			SELECT lto_status FROM tb_lto WHERE lto_seq = #{ltoSeq }
		</selectKey>
	</update>
	
	<update id="pgbStoStautsAutoUpdate" parameterType="pgbVo">
		UPDATE tb_sto SET
			sto_status = (select CASE 
				WHEN 
					(SELECT ((A/B)*100) <![CDATA[ >= ]]> C FROM (
						SELECT 
							((SELECT count(1) FROM tb_point WHERE sto_seq = #{stoSeq } AND point_round = (SELECT sto_arr_std_cnt FROM tb_sto WHERE sto_seq = #{stoSeq }) AND point_rslt_cd in ('+'))) AS A
							, (SELECT sto_trial_cnt FROM tb_sto WHERE sto_seq = #{stoSeq }) AS B
							, (SELECT sto_arr_std_pst FROM tb_sto WHERE sto_seq = #{stoSeq }) AS C
						FROM DUAL ) tt) = 1
				THEN 
					'CMP'
				ELSE 
					'ING'
				END AS sta1), 
			sto_arr_dt = (select CASE 
				WHEN 
					(SELECT ((A/B)*100) <![CDATA[ >= ]]> C FROM (
						SELECT 
							((SELECT count(1) FROM tb_point WHERE sto_seq = #{stoSeq } AND point_round = (SELECT sto_arr_std_cnt FROM tb_sto WHERE sto_seq = #{stoSeq }) AND point_rslt_cd in ('+'))) AS A
							, (SELECT sto_trial_cnt FROM tb_sto WHERE sto_seq = #{stoSeq }) AS B
							, (SELECT sto_arr_std_pst FROM tb_sto WHERE sto_seq = #{stoSeq }) AS C
						FROM DUAL ) tt) = 1
				THEN 
					current_timestamp()
				ELSE 
					NULL
				END AS sta2),
			sto_arr_yn = (select CASE 
				WHEN 
					(SELECT ((A/B)*100) <![CDATA[ >= ]]> C FROM (
						SELECT 
							((SELECT count(1) FROM tb_point WHERE sto_seq = #{stoSeq } AND point_round = (SELECT sto_arr_std_cnt FROM tb_sto WHERE sto_seq = #{stoSeq }) AND point_rslt_cd in ('+'))) AS A
							, (SELECT sto_trial_cnt FROM tb_sto WHERE sto_seq = #{stoSeq }) AS B
							, (SELECT sto_arr_std_pst FROM tb_sto WHERE sto_seq = #{stoSeq }) AS C
						FROM DUAL ) tt) = 1
				THEN 
					'Y'
				ELSE 
					'N'
				END AS sta3)
		WHERE sto_seq = #{stoSeq }
		
		<selectKey keyProperty="stoStatus" resultType="String" order="AFTER">
			SELECT sto_status FROM tb_sto WHERE sto_seq = #{stoSeq }
		</selectKey>
	</update>
	
	
	<select id="pgbStoInsert" parameterType="pgbStoVo">
		INSERT INTO tb_sto (
				lto_seq ,
				sto_status ,
				sto_name ,
				sto_contents ,
				sto_trial_cnt ,
				sto_arr_std_pst ,
				sto_urge_tp_cd ,
				sto_urge_contents ,
				sto_enforce_contents ,
				sto_memo_contents
			)
		VALUES (
				#{ltoSeq } , 
				'WIT' ,
				#{stoName } , 
				#{stoContents } ,
				#{stoTrialCnt } ,
				#{stoArrStdPst } ,
				#{stoUrgeTpCd } ,
				#{stoUrgeContents } ,
				#{stoEnforceContents } ,
				#{stoMemoContents } 
			)
	</select>
	
	<select id="pgbStoUpdate" parameterType="pgbStoVo">
		UPDATE tb_sto SET 
			sto_name = #{stoName } ,
			sto_contents = #{stoContents } ,
			sto_trial_cnt = #{stoTrialCnt } ,
			sto_arr_std_pst = #{stoArrStdPst } ,
			sto_urge_tp_cd = #{stoUrgeTpCd } ,
			sto_urge_contents = #{stoUrgeContents } ,
			sto_enforce_contents = #{stoEnforceContents } ,
			sto_memo_contents = #{stoMemoContents }
		WHERE sto_seq = #{stoSeq }
	</select>
	
	<insert id="pgbPointInsert" parameterType="pgbPointVo">
		INSERT INTO tb_point (
				sto_seq ,
				point_round ,
				point_rslt_cd ,
				point_reg_mbr_seq
			)
		VALUE(
				#{stoSeq } , 
				#{pointRound } , 
				#{pointRsltCd } ,
				#{pointRegMbrSeq } 
			)
	</insert>
	
	<delete id="pgbPointDelete" parameterType="pgbPointVo">
		DELETE
		  FROM tb_point
		 WHERE point_seq IN (
				SELECT * FROM (SELECT MAX(point_seq)
				  FROM tb_point
				 WHERE sto_seq = #{stoSeq }
				   AND point_round = #{pointRound }
				 ) AA
			   )
	</delete>
	
	<select id="pgbPointListSelect" parameterType="pgbPointVo" resultType="pgbPointVo">
		SELECT * 
		  FROM tb_point tp 
		 WHERE sto_seq = #{stoSeq }
		   AND point_round = #{pointRound }
		 ORDER BY point_seq 
	</select>
	
	<select id="pgbModalTitleSelect" parameterType="pgbVO" resultType="pgbVO">
		SELECT ts.student_seq
		     , ts.student_name
		     , tcl.class_name
		     , tce.center_name
		  FROM tb_student ts
		  LEFT OUTER JOIN tb_class tcl ON ts.class_seq = tcl.class_seq
		  LEFT OUTER JOIN tb_center tce ON tcl.center_seq = tce.center_seq
		 WHERE student_seq = #{studentSeq }
	</select>
	
	<select id="pgbStoTmplListSelect" parameterType="pgbStoVo" resultType="pgbStoVo">
		SELECT * 
		  FROM tb_sto
		 WHERE lto_seq = (SELECT tmpl_seq FROM tb_lto WHERE lto_seq = #{ltoSeq }) 
	</select>
	
	<update id="pgbPointRoundUpdate" parameterType="pgbStoVo">
		UPDATE tb_sto 
		   SET sto_arr_std_cnt = sto_arr_std_cnt+1 
		 WHERE sto_seq = #{stoSeq }
		 
		<selectKey keyProperty="stoArrStdCnt" resultType="int" order="AFTER">
			SELECT sto_arr_std_cnt FROM tb_sto WHERE sto_seq = #{stoSeq }
		</selectKey>
	</update>
	
	<select id="pgbLtoChartDataSelect" parameterType="pgbVo" resultType="pgbChartVo">
		SELECT 
			sub.sto_seq,
			sub.sto_name,
			sub.sto_arr_yn,
			sub.sto_arr_std_pst,
			sub.point_round,
			sub.point_dt,
			ROUND(sub.rea_cnt / sub.sto_trial_cnt * 100, 0) AS rea_ratio,
			ROUND(sub.urg_cnt / sub.sto_trial_cnt * 100, 0) AS urg_ratio
		FROM (
			SELECT 
				tp.sto_seq,
				ts.sto_name,
				ts.sto_arr_yn,
				ts.sto_arr_std_pst,
				tp.point_round, 
				DATE_FORMAT(MAX(tp.point_reg_dt), '%Y-%m-%d') AS point_dt,
				SUM(CASE WHEN tp.point_rslt_cd='+' THEN 1 ELSE 0 END) AS rea_cnt,
				SUM(CASE WHEN tp.point_rslt_cd='P' THEN 1 ELSE 0 END) AS urg_cnt, 
				ts.sto_trial_cnt
			FROM tb_point tp, tb_sto ts 
			where tp.sto_seq = ts.sto_seq 
			and ts.lto_seq = #{ltoSeq }
			GROUP BY tp.sto_seq, tp.point_round
			) sub
		ORDER BY sub.sto_seq, sub.point_round
	</select>
	
</mapper>
		
		
